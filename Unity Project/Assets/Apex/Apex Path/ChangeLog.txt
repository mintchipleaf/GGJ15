v 1.2.5
	Improvements:
	- Added patch functionality to the Products window so that minor fixes such as this can be applied without having to download a new package manually.

	Bug Fixes:
	- Fixed a bug with the Grid that was caused by the new Portal Editor.
	- Fixed the Portal Editor so portals can now be properly drawn on elevated terrain.

v 1.2.4
	Improvements:
	- Replaced the AsyncFailed event of the Path Finder Service with a callback to fix a problem with AOT compilation.
	- Portals editor has been changed, which should hopefully make it easier to set up portals.
	- Portals can now be either one- or two-way.
	- Prepared for Advanced Dynamic Obstacles release
	- The max constraint on Obstacle Sensitivity on the Grid has been removed. This may lead to some funky behaviour if set to an unreasonably high value.
	  The original constraint is still applied when processing height settings for cells.

	Bug Fixes:
	- Again a few win8 specific errors had crept in, they are now fixed.

v 1.2.3
	New Features:
	- Obstacle Sensitivity Range is now in effect for Dynamic Obstacles similar to static obstacles. Options exists to use the Grid's setting or a custom one.
	- Added a simple utility to create and edit an Attribute set.
	- Added a marshaller that allows marshalling actions from another thread onto the main thread. This is now used by the CallbackPathRequest, hence callbacks will now be made on the main thread.
	- Added automatic update checking and a Products window for Apex products to give an overview of installed / available packages.
	- The grid component now has an 'offset' property when 'Link Origin to Transform' is checked. This allows the grid to be offset some amount in relation to its transform.
	
	Breaking Changes:
	- ISteerable has been deprecated and merged into IMovable. The distinction between these two really caused more confusion than clarity.
	- The currentDestination property on IMovable has been deprecated and is now called nextNodePosition instead.
	  The property has always returned the location of the next node along the path being travelled, but its name suggested otherwise.
	  It is now also a nullable Vector3 instead of an IPositioned, to align it with the finalDestination property.
	- RectangleXZ is now a struct.

	Improvements:
	- Dynamic Obstacle performance improved by approximately 400%.
	- The PathResult's properties are now writable so that result processors can change them.
	- The Grid Field tool has moved to the Tools menu.
	- The UnitNavigationEventMessage NodeReached event is now raised after the next node has been resolved, so that nextNodePosition will return the expected next node rather than the one already reported as reached.
	- The path service now exposes a property that makes changing the cost provider to use easier than before.
	- Portals now have an option to be treated relative to their transform, i.e. the end points will use local space. This means portals can work properly in prefabs.
	- The 'currentPath' property of the IMovable is now of type Path instead of the previous less helpful IIterable<IPositioned>
	- The grid visualizer will now update if the transform, on which the grid resides, is moved.
	- Improved a few component editors.

	Bug Fixes:
	- Corrected a multithreading issue involving dynamic obstacles with frequent updates.
	- Corrected a few labels on attributed components in the Unity editor.
	- Fixed the PortalActionTeleportComponent, it was teleporting units into the terrain.
	- Fixed a bug where runtime initialization of a grid with a portal already on it would only partially initialize the portal.
	- Fixed a bug where static obstacle detection would detect obstacles outside the boundaries on elevated terrain.
	- Terrain checking will no longer fail to detect terrain at the joint points of terrain pieces.
	- Fixed a bug with the Navigating Unit with Selection quick start in Win8 / WP8 apps when a custom input receiver is defined.
	- Fixed a bug with manually initialized grids, where loaded at runtime and moved to position before initialization would not move the grid accordingly.

v 1.2.2 Patch 2
	New Features:
	- ISteerable now has a finalDestination property
	- A new request type CallbackPathRequest was added. This allows for interaction with the path finder without having to implement INeedPath
	- All request types now have a 'type' property. Currently two types are available, Normal and IntelOnly, the latter being an optimization for AI use.
	- SteerForPathComponent now implements IInjectPathFinderOptions which allows for having custom requests injected with the path finder options assigned to a unit
	- Path results now include a 'pathCost' property which represents the length of the path and the cost of its individual nodes.
	- Paths are now represented by the Path class. It derives from the StackWithLookAhead and thusly is not a breaking change. It is simply more clear and adds some additional possibilities, e.g IMovable.MoveAlong(...).
	- A SimpleQueue was added to data structures
	- A new Example scene 'Item Pickup' was added, showing some of the new features.

	Breaking Changes:
	- RepetableAction is now correctly named RepeatableAction. Simply search and replace.
	- The ManualPath and the matching IMovable.MoveAlong method felt clumsy and have been deprecated. Instead use the new Path class and the matching IMovable.MoveAlong methods.
	- Cleaned up the IPathService interface to only expose methods intended for use outside the framework. Not likely to affect you.
	- Cleaned up the IPathRequest and its implementation. Not likely to affect you.

	Improvements:
	- StackWithLookAhead now has an indexer and implements IIndexable
	- The currentPath and currentWaypoints properties of ISteerable are now indexable
	- Connector portals now produce smoother paths (even more so than 1.2.1)
	- Shortcut portals covering multiple cells will now correctly choose entry and exits points that result in the shortest path.
	- IUnit now also implements IHaveAttributes

	Bug Fixes:
	- Windows Store App and WP8 Apps no longer throw exceptions on compilation, for real this time.
	- Fixed a nasty bug where units would increase their speed in certain scenarios, especially obvious when issuing manual paths.
	- Two examples that broke in patch 1 are now back in operation.
	- The path finder and path smoother, now properly respects the custom cost of individual grid cells

v 1.2.1 Patch 1
	New Features:
	- The GridManager now has methods to get references to GridComponents given a position or bounds struct.
	- A new message 'GridStatusMessage' is sent when grids do runtime initialization or are disabled.
	- New factory methods enable runtime instantiation of grids and portals
	- The GetCell method on IGrid now has an overload that allows to adjust the position to the grid bounds, i.e. find the closest cell on the grid if the position is outside the grid.

	Breaking Changes:
	- The Disable method on the GridComponent now requires an argument specifying the maximum milliseconds to use per frame. This is related to the changes/fixes below.
	- IMoveCost signature changed. Unlikely to affect anyone, but a breaking change nonetheless.
	- IPortalAction's GetActionCost now takes a IMoveCost argument to allow for better cost calculations.

	Bug Fixes:
	- Windows Store App and WP8 Apps no longer throw exceptions on compilation.
	- The editor for attributed components no longer fails if no attribute set is defined.
	- Portals now respond to grids being initialized / disabled at runtime and no longer cause exceptions when placed on grids where automatic initialization is turned off.
	- Dynamic obstacles now have an option to support dynamic grids, i.e. initialization / disabling at runtime. Set this to true if you initialize / disable grids at runtime.
	- The callback argument in the Initialize method on the GridComponent can now be null if you don't require a callback.
	- Basic avoidance will no longer throw an exception if a unit being avoided, is destroyed

	Improvements:
	- The 'Navigate to Nearest if Blocked' setting now also applies to actual blocked cells.
	- Changed the Mac Support of the default input receiver. It now has a 'Right Click Supported' property instead. If your Mac is not set up for right click support, uncheck that option.
	- Grids not set to automatic initialization are now drawn semi transparent.
	- Movement across stitched together grids is now smoother.

v 1.2 Feature update
	New Features:
	- The Grid visualizer will now perform far better. It will now only draw the grid when within a configurable zoom level.
	- Portals now come in two flavors, shortcuts and connectors. Shortcuts are portals such as teleporters that could provide a shortcut to the unit, while connectors simply connect with each other without being seen as shortcuts.
	  The difference is that shortcut portals have a rather heavy cost with regards to path finding, whereas connectors have no cost. A video explaining this will be released soon.
	- Added a Stop method to the IMovingObject interface.
	- Cell size is now a float.
	- The IMovable interface now has a MoveAlong(path) method which can be used to feed a path directly to the unit.
	- The cell's isPermanentlyBlocked property is now public.
	- The patrol behavior now has an option to visit patrol points at random.
	- The default input receiver now also works on Mac. You should still replace it with your own though.
	- The CharacterControllerMover is now included by default and will be used automatically for locomotion of units with a CharacterController.
	  The example class is still there as a reference for overriding locomotion.
	- The cut corners setting on the Path Service has moved to the Steer for Path component to allow per unit basis settings of this value.
	- New option to prevent off-grid navigation, this will force unit to move only on grids and they will only be able to move between grids using connector portals.
	- New option to make units move to the closest possible location if the actual destination is blocked or otherwise inaccessible.
	- New option to send out an announcement for every node reached along a path.
	- First iteration on improving the Inspector editors for the various components. This have caused some properties to appear in a different order than before.
	- Added a tool window under the Windows menu. Apex Path - Grid Field will allow for easy creating of a field consisting of multiple stitched together grids.

	Breaking Changes:
	- The 'Use Path Smooting' property on the Steer for Path component had its typo corrected to 'Use Path Smoothing'.
	  So if you disabled path smoothing, you will have to do so again, sorry.
	- The enum SlowingAlgortim and the Steer for Path property Slowing Algoritm also had their typos fixed, so if you made changes here, you will have to do them again, sorry.
	
	Bug Fixes:
	- Selecting units at various heights should now work properly.
	- Adding a portal now properly places it in relation to its game object.
	- The path visualizer no longer incorrectly shows an extra intermittent node in connection with portals.
	- A number of minor bugs.

	Delayed improvements:
	- We wanted to improve the memory footprint of the grid height map. This proved to be a tougher challenge than initially assumed, so we have delayed that to a later update.

v. 1.1 patch 1
	New Features:
	- Option to disallow diagonal movement added to the SteerForPath Component.
	- IControlFacingOrientation now has an Unsubscribe method.
	
	Bug fixes:
	- MenuExtensions had escaped the editor folder, they are now back in the fold.
	- The basic avoidance steering will no longer affect units with no velocity.
	   
v. 1.1 Minor feature update
	- Adds basic avoidance to steering. A new Quickstart will now add this to units.
	- Minor improvement to the replacement of input receivers, input receivers are now resolved by means of an attribute.
	- Improved configuration options when defining load balancers.
	- Streamlined facing orientation control to behave the same as locomotion with regards to overriding default behavior. This is a *Breaking* change.
	- Grid baked data can now be stored as an asset. This allows for prefab'ing grids.
	- Grids now have an option to disable automatic initialization, and instead an Initialize method must be called manually. This Initialize method does its work smoothly over several frames.
	- Grids can now be disabled to release all memory used, but calling Disable().
	- The dynamic update time limit on grids has been removed and instead must be supplied in the call to perform a dynamic update.
	- Baked grids can now be re-baked without first having to press 'Edit'.
	- SteerableUnitComponent now has a setting to control the minimum speed at which units turn.

	Bug fixes:
	- Game services are now properly initialized before other components.

v. 1.0 Initial Release